#include <iostream>
#include <string>
using namespace std;

class Node {
public:
    string key;
    string meaning;
    Node* left;
    Node* right;
    int height;

    Node(string k, string m) {
        key = k;
        meaning = m;
        left = right = NULL;
        height = 1;
    }
};

class AVLTree {
    Node* root;

    int getHeight(Node* node) {
        if (node == NULL)
            return 0;
        return node->height;
    }

    int getBalance(Node* node) {
        if (node == NULL)
            return 0;
        return getHeight(node->left) - getHeight(node->right);
    }

    Node* rightRotate(Node* y) {
        Node* x = y->left;
        Node* T2 = x->right;

        // Perform rotation
        x->right = y;
        y->left = T2;

        // Update heights
        y->height = 1 + max(getHeight(y->left), getHeight(y->right));
        x->height = 1 + max(getHeight(x->left), getHeight(x->right));

        return x;
    }

    Node* leftRotate(Node* x) {
        Node* y = x->right;
        Node* T2 = y->left;

        y->left = x;
        x->right = T2;

        x->height = 1 + max(getHeight(x->left), getHeight(x->right));
        y->height = 1 + max(getHeight(y->left), getHeight(y->right));

        return y;
    }

    Node* insertRec(Node* node, string key, string meaning) {
        if (node == NULL)
            return new Node(key, meaning);

        if (key < node->key)
            node->left = insertRec(node->left, key, meaning);
        else if (key > node->key)
            node->right = insertRec(node->right, key, meaning);
        else {
            cout << "Duplicate Key Not Allowed.\n";
            return node;
        }

        node->height = 1 + max(getHeight(node->left), getHeight(node->right));


        int balance = getBalance(node);

        if (balance > 1 && key < node->left->key)
            return rightRotate(node);

        if (balance < -1 && key > node->right->key)
            return leftRotate(node);

        if (balance > 1 && key > node->left->key) {
            node->left = leftRotate(node->left);
            return rightRotate(node);
        }

        if (balance < -1 && key < node->right->key) {
            node->right = rightRotate(node->right);
            return leftRotate(node);
        }

        return node;
    }

    Node* minValueNode(Node* node) {
        Node* current = node;
        while (current->left != NULL)
            current = current->left;
        return current;
    }

    Node* deleteRec(Node* root, string key) {
        if (root == NULL)
            return root;

        if (key < root->key)
            root->left = deleteRec(root->left, key);
        else if (key > root->key)
            root->right = deleteRec(root->right, key);
        else {
            if ((root->left == NULL) || (root->right == NULL)) {
                Node* temp = root->left ? root->left : root->right;

                if (temp == NULL) {
                    temp = root;
                    root = NULL;
                } else
                    *root = *temp;

                delete temp;
            } else {
                Node* temp = minValueNode(root->right);
                root->key = temp->key;
                root->meaning = temp->meaning;
                root->right = deleteRec(root->right, temp->key);
            }
        }

        if (root == NULL)
            return root;

        root->height = 1 + max(getHeight(root->left), getHeight(root->right));

        int balance = getBalance(root);

        if (balance > 1 && getBalance(root->left) >= 0)
            return rightRotate(root);

        if (balance > 1 && getBalance(root->left) < 0) {
            root->left = leftRotate(root->left);
            return rightRotate(root);
        }

        if (balance < -1 && getBalance(root->right) <= 0)
            return leftRotate(root);

        if (balance < -1 && getBalance(root->right) > 0) {
            root->right = rightRotate(root->right);
            return leftRotate(root);
        }

        return root;
    }

    void inorder(Node* node) {
        if (node != NULL) {
            inorder(node->left);
            cout << node->key << ": " << node->meaning << endl;
            inorder(node->right);
        }
    }

    void reverseInorder(Node* node) {
        if (node != NULL) {
            reverseInorder(node->right);
            cout << node->key << ": " << node->meaning << endl;
            reverseInorder(node->left);
        }
    }

    bool update(Node* node, string key, string newMeaning) {
        if (node == NULL)
            return false;
        if (key == node->key) {
            node->meaning = newMeaning;
            return true;
        } else if (key < node->key)
            return update(node->left, key, newMeaning);
        else
            return update(node->right, key, newMeaning);
    }

    int searchComparisons(Node* node, string key, int comparisons = 0) {
        if (node == NULL)
            return comparisons;

        comparisons++;
        if (key == node->key)
            return comparisons;
        else if (key < node->key)
            return searchComparisons(node->left, key, comparisons);
        else
            return searchComparisons(node->right, key, comparisons);
    }

public:
    AVLTree() {
        root = NULL;
    }

    void insert(string key, string meaning) {
        root = insertRec(root, key, meaning);
    }

    void deleteKey(string key) {
        root = deleteRec(root, key);
    }

    void updateMeaning(string key, string newMeaning) {
        if (update(root, key, newMeaning))
            cout << "Updated successfully.\n";
        else
            cout << "Key not found.\n";
    }

    void displayAscending() {
        cout << "Dictionary in Ascending Order:\n";
        inorder(root);
    }

    void displayDescending() {
        cout << "Dictionary in Descending Order:\n";
        reverseInorder(root);
    }

    void findKeyword(string key) {
        int comparisons = searchComparisons(root, key);
        if (comparisons == 0)
            cout << "Key not found.\n";
        else
            cout << "Key found in " << comparisons << " comparisons.\n";
    }

    void maxComparisons() {
        cout << "Maximum comparisons required: " << getHeight(root) << endl;
    }
};

int main() {
    AVLTree dict;
    int choice;
    string key, meaning;

    do {
        cout << "\n--- Dictionary Menu ---\n";
        cout << "1. Add Keyword\n2. Delete Keyword\n3. Update Meaning\n4. Display Ascending\n5. Display Descending\n6. Search Keyword\n7. Max Comparisons\n8. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter keyword: ";
                cin >> key;
                cout << "Enter meaning: ";
                cin.ignore();
                getline(cin, meaning);
                dict.insert(key, meaning);
                break;
            case 2:
                cout << "Enter keyword to delete: ";
                cin >> key;
                dict.deleteKey(key);
                break;
            case 3:
                cout << "Enter keyword to update: ";
                cin >> key;
                cout << "Enter new meaning: ";
                cin.ignore();
                getline(cin, meaning);
                dict.updateMeaning(key, meaning);
                break;
            case 4:
                dict.displayAscending();
                break;
            case 5:
                dict.displayDescending();
                break;
            case 6:
                cout << "Enter keyword to search: ";
                cin >> key;
                dict.findKeyword(key);
                break;
            case 7:
                dict.maxComparisons();
                break;
            case 8:
                cout << "Exiting.\n";
                break;
            default:
                cout << "Invalid choice!\n";
        }
    } while (choice != 8);

    return 0;
}